import type { CollectionConfig } from 'payload'
import { anyone } from '../Users/access/anyone'
import { eventManager } from '../Users/access/eventManager'
import { organisationField } from '@/fields/organisation'
import { getAllOrganisation } from '@/endpoints/organisation-roles/allOrganisation'
import { getOrganisationRolesByType } from '@/endpoints/organisation-roles/rolesByOrganisation'

export const OrganisationRoles: CollectionConfig = {
  slug: 'organisation_roles',
  labels: {
    singular: 'Organisation Role',
    plural: 'Organisation Roles',
  },
  access: {
    create: eventManager,
    read: anyone,
    update: eventManager,
    delete: eventManager,
  },
  admin: {
    useAsTitle: 'organisation_type',
  },
  endpoints: [
    {
      path: '/all_organisation',
      method: 'get',
      handler: getAllOrganisation,
    },
    {
      path: '/by_organisation',
      method: 'get',
      handler: getOrganisationRolesByType,
    },
  ],
  fields: [
    organisationField,
    {
      name: 'roles',
      type: 'array',
      label: 'Roles',
      fields: [
        {
          type: 'row',
          fields: [
            {
              name: 'label',
              type: 'text',
              label: 'Role Label',
            },
            {
              name: 'key',
              type: 'text',
              label: 'Role Key',
              admin: {
                position: 'sidebar',
                description: 'Will be autogenerated',
                readOnly: true,
              },
              hooks: {
                beforeChange: [
                  ({ siblingData }) => {
                    if (siblingData.label) {
                      return siblingData.label
                        .toLowerCase()
                        .replace(/[^\w\s_]/g, '')
                        .replace(/\s+/g, '_')
                        .replace(/_+/g, '_')
                        .trim()
                        .replace(/^_|_$/g, '')
                    }
                  },
                ],
              },
            },
          ],
        },
      ],
    },
  ],
}
