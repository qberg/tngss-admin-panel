/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    speakers: Speaker;
    'speaker-types': SpeakerType;
    events: Event;
    'event-formats': EventFormat;
    'event-tags': EventTag;
    halls: Hall;
    zones: Zone;
    venues: Venue;
    cities: City;
    'ticket-types': TicketType;
    representatives: Representative;
    users: User;
    media: Media;
    documents: Document;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    speakers: SpeakersSelect<false> | SpeakersSelect<true>;
    'speaker-types': SpeakerTypesSelect<false> | SpeakerTypesSelect<true>;
    events: EventsSelect<false> | EventsSelect<true>;
    'event-formats': EventFormatsSelect<false> | EventFormatsSelect<true>;
    'event-tags': EventTagsSelect<false> | EventTagsSelect<true>;
    halls: HallsSelect<false> | HallsSelect<true>;
    zones: ZonesSelect<false> | ZonesSelect<true>;
    venues: VenuesSelect<false> | VenuesSelect<true>;
    cities: CitiesSelect<false> | CitiesSelect<true>;
    'ticket-types': TicketTypesSelect<false> | TicketTypesSelect<true>;
    representatives: RepresentativesSelect<false> | RepresentativesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    documents: DocumentsSelect<false> | DocumentsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    'home-wp': HomeWp;
    'about-us-wp': AboutUsWp;
    'home-app': HomeApp;
  };
  globalsSelect: {
    'home-wp': HomeWpSelect<false> | HomeWpSelect<true>;
    'about-us-wp': AboutUsWpSelect<false> | AboutUsWpSelect<true>;
    'home-app': HomeAppSelect<false> | HomeAppSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "speakers".
 */
export interface Speaker {
  id: string;
  /**
   * Upload image of the speaker
   */
  profile_image?: (string | null) | Media;
  name: string;
  designation: string;
  organization: string;
  speaker_type: string | SpeakerType;
  linkedin_url?: string | null;
  location?: {
    city?: string | null;
    country?: string | null;
  };
  summary?: string | null;
  alma_matter?:
    | {
        college?: string | null;
        id?: string | null;
      }[]
    | null;
  languages?:
    | {
        lang?: string | null;
        id?: string | null;
      }[]
    | null;
  expertise?: (string | EventTag)[] | null;
  /**
   * Upload flight details - add as many documents or images as needed
   */
  travel_details?:
    | {
        file_type?: ('document' | 'media') | null;
        /**
         * Upload PDF document
         */
        document?: (string | null) | Document;
        /**
         * Upload image file (JPG, PNG, etc.)
         */
        media?: (string | null) | Media;
        /**
         * Optional description for this file
         */
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  hotel?: string | null;
  hotel_map_url?: string | null;
  room_number?: string | null;
  assigned_coordinator?: (string | null) | Representative;
  /**
   * Special requirements, preferences, etc.
   */
  accommodation_details?: string | null;
  duration: {
    from_date: string;
    to_date: string;
  };
  status?: ('confirmed' | 'pending' | 'cancelled' | 'completed') | null;
  /**
   * Lower numbers appear first (1 = highest)
   */
  sort_order?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  /**
   * Alternative text for accessibility and SEO
   */
  alt: string;
  /**
   * What type of media is this?
   */
  mediaType:
    | 'speaker_photos'
    | 'event_images'
    | 'event_videos'
    | 'marketing_assets'
    | 'venue_photos'
    | 'presentation_media'
    | 'branding'
    | 'social_media'
    | 'press_media'
    | 'other';
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * Manage speaker type categories (Domestic, International, etc.)
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "speaker-types".
 */
export interface SpeakerType {
  id: string;
  /**
   * Unique name for the speaker type (e.g., Domestic, International)
   */
  name: string;
  /**
   * URL-friendly identifier (English only, auto-generated from name)
   */
  slug?: string | null;
  /**
   * Optional description of this speaker type
   */
  description?: string | null;
  /**
   * Enable to include this item in lists, filters, or dropdowns.
   */
  isActive?: boolean | null;
  /**
   * Order in which this appears in dropdowns (lower = first)
   */
  sortOrder?: number | null;
  /**
   * Whether speakers of this type typically need visa documents
   */
  requiresVisa?: boolean | null;
  /**
   * Default accommodation level for this speaker type
   */
  defaultAccommodation?: ('standard_hotel' | 'premium_hotel' | 'corporate_housing' | 'none') | null;
  /**
   * Typical budget range for speakers of this type
   */
  averageBudget?: {
    min?: number | null;
    max?: number | null;
    currency?: ('INR' | 'USD' | 'EUR' | 'GBP') | null;
  };
  /**
   * Documents typically required for this speaker type
   */
  requiredDocuments?:
    | {
        document:
          | 'passport'
          | 'visa'
          | 'flight_itinerary'
          | 'hotel_booking'
          | 'speaker_agreement'
          | 'tax_forms'
          | 'photo_id'
          | 'resume';
        id?: string | null;
      }[]
    | null;
  /**
   * Hex color code for UI display (e.g., #FF5722 for International)
   */
  color?: string | null;
  /**
   * Material UI icon name or emoji for display
   */
  icon?: string | null;
  /**
   * Number of speakers using this type (auto-calculated)
   */
  usageCount?: number | null;
  /**
   * Internal notes for administrators
   */
  notes?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event-tags".
 */
export interface EventTag {
  id: string;
  name: string;
  /**
   * URL-friendly identifier (English only, auto-generated from name)
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents".
 */
export interface Document {
  id: string;
  /**
   * Give a short brief on what the document is about
   */
  title: string;
  /**
   * Categorize for better organization
   */
  category:
    | 'flight_details'
    | 'hotel_booking'
    | 'visa_documents'
    | 'speaker_contract'
    | 'presentation_materials'
    | 'invoice_receipt'
    | 'id_documents'
    | 'event_materials'
    | 'other';
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "representatives".
 */
export interface Representative {
  id: string;
  name: string;
  designation?: string | null;
  org_name?: string | null;
  phone_number?: string | null;
  email_id?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events".
 */
export interface Event {
  id: string;
  main_or_partner: 'main_event' | 'partner_event';
  access_level?: (string | TicketType)[] | null;
  /**
   * Ensure sponsor logos are embedded in the image, if applicable
   */
  banner_image?: (string | null) | Media;
  title: string;
  about?: string | null;
  schedule: {
    from_date: string;
    to_date: string;
  };
  hall?: (string | null) | Hall;
  zone?: (string | null) | Zone;
  partner_event_venue?: {
    event_mode: 'online' | 'offline';
    platform?: ('zoom' | 'teams' | 'meet' | 'youtube' | 'custom') | null;
    /**
     * Link for virtual attendees to join
     */
    joinUrl?: string | null;
    meetingId?: string | null;
    passcode?: string | null;
    venue: string;
    city: string | City;
  };
  agenda?:
    | {
        time?: string | null;
        description?: string | null;
        id?: string | null;
      }[]
    | null;
  speakers?:
    | {
        speaker?: (string | null) | Speaker;
        id?: string | null;
      }[]
    | null;
  format: string | EventFormat;
  tags: (string | EventTag)[];
  /**
   * URL-friendly identifier (English only, auto-generated from title)
   */
  slug?: string | null;
  /**
   * How should users register for this event? (Approval mode will be available in future release)
   */
  registeration_mode: 'none' | 'fcfs' | 'approval';
  /**
   * Settings specific to FCFS registeration
   */
  fcfs_settings?: {
    /**
     * Set the maximum number of attendees for this event
     */
    capacity_settings?: {
      /**
       * Choose whether this event has a capacity limit
       */
      capacity_type: 'limited' | 'unlimited';
      /**
       * Maximum number of people who can attend
       */
      max_capacity?: number | null;
      /**
       * Show warning when registrations exceed this number (optional)
       */
      soft_capacity_warning?: number | null;
    };
    /**
     * Allow users to join waitlist when event reaches capacity
     */
    enable_waitlist?: boolean | null;
    /**
     * Automatically paromote users when spots become available
     */
    auto_promote_from_waitlist?: boolean | null;
    registeration: {
      from_date: string;
      to_date: string;
    };
    unlimited_capacity_settings?: {
      /**
       * Send notification to admins when registrations reach this number
       */
      notify_admins_at?: number | null;
      /**
       * Automatically close registration at this number (optional safety limit)
       */
      auto_close_registeration_at?: number | null;
    };
  };
  /**
   * Updated automatically by registeration service
   */
  current_registerations?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ticket-types".
 */
export interface TicketType {
  id: string;
  name: string;
  /**
   * URL-friendly identifier (English only, auto-generated from name)
   */
  slug?: string | null;
  /**
   * List of benefits included with this ticket type
   */
  features?:
    | {
        feature: string;
        id?: string | null;
      }[]
    | null;
  external_integration?: {
    /**
     * Reference ID in kamelon ticketing system
     */
    vendorTicketTypeId?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "halls".
 */
export interface Hall {
  id: string;
  venue: string | Venue;
  name: string;
  /**
   * URL-friendly identifier (English only, auto-generated from name)
   */
  slug?: string | null;
  /**
   * Number of zones in this hall
   */
  zones_count?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "venues".
 */
export interface Venue {
  id: string;
  name: string;
  city: string;
  type: 'main_event' | 'partner_event';
  mapUrl?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "zones".
 */
export interface Zone {
  id: string;
  hall: string | Hall;
  /**
   * URL-friendly identifier (English only, auto-generated from name)
   */
  slug?: string | null;
  name: string;
  dimensions?: string | null;
  capacity?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cities".
 */
export interface City {
  id: string;
  name: string;
  /**
   * URL-friendly identifier (English only, auto-generated from name)
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event-formats".
 */
export interface EventFormat {
  id: string;
  name?: string | null;
  /**
   * URL-friendly identifier (English only, auto-generated from name)
   */
  slug?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage admin panel users and their permissions
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name: string;
  /**
   * Admin: Full system access, Event Manager: Manage events and attendees (can create content managers), Content Manager: Manage content of website (cannot create users)
   */
  roles: ('admin' | 'event-manager' | 'content-manager' | 'user')[];
  /**
   * Suspended users cannot log in to the admin panel
   */
  status?: ('active' | 'suspended') | null;
  /**
   * Last successful login to admin panel
   */
  lastLogin?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'speakers';
        value: string | Speaker;
      } | null)
    | ({
        relationTo: 'speaker-types';
        value: string | SpeakerType;
      } | null)
    | ({
        relationTo: 'events';
        value: string | Event;
      } | null)
    | ({
        relationTo: 'event-formats';
        value: string | EventFormat;
      } | null)
    | ({
        relationTo: 'event-tags';
        value: string | EventTag;
      } | null)
    | ({
        relationTo: 'halls';
        value: string | Hall;
      } | null)
    | ({
        relationTo: 'zones';
        value: string | Zone;
      } | null)
    | ({
        relationTo: 'venues';
        value: string | Venue;
      } | null)
    | ({
        relationTo: 'cities';
        value: string | City;
      } | null)
    | ({
        relationTo: 'ticket-types';
        value: string | TicketType;
      } | null)
    | ({
        relationTo: 'representatives';
        value: string | Representative;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'documents';
        value: string | Document;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "speakers_select".
 */
export interface SpeakersSelect<T extends boolean = true> {
  profile_image?: T;
  name?: T;
  designation?: T;
  organization?: T;
  speaker_type?: T;
  linkedin_url?: T;
  location?:
    | T
    | {
        city?: T;
        country?: T;
      };
  summary?: T;
  alma_matter?:
    | T
    | {
        college?: T;
        id?: T;
      };
  languages?:
    | T
    | {
        lang?: T;
        id?: T;
      };
  expertise?: T;
  travel_details?:
    | T
    | {
        file_type?: T;
        document?: T;
        media?: T;
        description?: T;
        id?: T;
      };
  hotel?: T;
  hotel_map_url?: T;
  room_number?: T;
  assigned_coordinator?: T;
  accommodation_details?: T;
  duration?:
    | T
    | {
        from_date?: T;
        to_date?: T;
      };
  status?: T;
  sort_order?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "speaker-types_select".
 */
export interface SpeakerTypesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  description?: T;
  isActive?: T;
  sortOrder?: T;
  requiresVisa?: T;
  defaultAccommodation?: T;
  averageBudget?:
    | T
    | {
        min?: T;
        max?: T;
        currency?: T;
      };
  requiredDocuments?:
    | T
    | {
        document?: T;
        id?: T;
      };
  color?: T;
  icon?: T;
  usageCount?: T;
  notes?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "events_select".
 */
export interface EventsSelect<T extends boolean = true> {
  main_or_partner?: T;
  access_level?: T;
  banner_image?: T;
  title?: T;
  about?: T;
  schedule?:
    | T
    | {
        from_date?: T;
        to_date?: T;
      };
  hall?: T;
  zone?: T;
  partner_event_venue?:
    | T
    | {
        event_mode?: T;
        platform?: T;
        joinUrl?: T;
        meetingId?: T;
        passcode?: T;
        venue?: T;
        city?: T;
      };
  agenda?:
    | T
    | {
        time?: T;
        description?: T;
        id?: T;
      };
  speakers?:
    | T
    | {
        speaker?: T;
        id?: T;
      };
  format?: T;
  tags?: T;
  slug?: T;
  registeration_mode?: T;
  fcfs_settings?:
    | T
    | {
        capacity_settings?:
          | T
          | {
              capacity_type?: T;
              max_capacity?: T;
              soft_capacity_warning?: T;
            };
        enable_waitlist?: T;
        auto_promote_from_waitlist?: T;
        registeration?:
          | T
          | {
              from_date?: T;
              to_date?: T;
            };
        unlimited_capacity_settings?:
          | T
          | {
              notify_admins_at?: T;
              auto_close_registeration_at?: T;
            };
      };
  current_registerations?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event-formats_select".
 */
export interface EventFormatsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event-tags_select".
 */
export interface EventTagsSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "halls_select".
 */
export interface HallsSelect<T extends boolean = true> {
  venue?: T;
  name?: T;
  slug?: T;
  zones_count?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "zones_select".
 */
export interface ZonesSelect<T extends boolean = true> {
  hall?: T;
  slug?: T;
  name?: T;
  dimensions?: T;
  capacity?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "venues_select".
 */
export interface VenuesSelect<T extends boolean = true> {
  name?: T;
  city?: T;
  type?: T;
  mapUrl?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cities_select".
 */
export interface CitiesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ticket-types_select".
 */
export interface TicketTypesSelect<T extends boolean = true> {
  name?: T;
  slug?: T;
  features?:
    | T
    | {
        feature?: T;
        id?: T;
      };
  external_integration?:
    | T
    | {
        vendorTicketTypeId?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "representatives_select".
 */
export interface RepresentativesSelect<T extends boolean = true> {
  name?: T;
  designation?: T;
  org_name?: T;
  phone_number?: T;
  email_id?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  roles?: T;
  status?: T;
  lastLogin?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  mediaType?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents_select".
 */
export interface DocumentsSelect<T extends boolean = true> {
  title?: T;
  category?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home-wp".
 */
export interface HomeWp {
  id: string;
  hero?: {
    location?: string | null;
    dates?: string | null;
    bgVideo?: (string | null) | Media;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about-us-wp".
 */
export interface AboutUsWp {
  id: string;
  hero?: {
    title?: string | null;
    desc?: string | null;
  };
  introduction?: {
    /**
     * Main heading for the introduction section
     */
    title?: string | null;
    /**
     * Introduction content. Each point will be a paragraph.
     */
    description?:
      | {
          point?: string | null;
          id?: string | null;
        }[]
      | null;
  };
  mission?: {
    /**
     * Main heading for the mission section
     */
    title?: string | null;
    /**
     * Mission content. Each point will be a paragraph.
     */
    description?:
      | {
          point?: string | null;
          id?: string | null;
        }[]
      | null;
    /**
     * Image to display alongside the mission content
     */
    image?: (string | null) | Media;
    /**
     * Alternative text for the image (for accessibility)
     */
    imageAlt?: string | null;
  };
  whyTN?: {
    title?: string | null;
    description?: string | null;
    image?: (string | null) | Media;
  };
  committe?: {
    title?: string | null;
    members?:
      | {
          name?: string | null;
          designation?: string | null;
          organization?: string | null;
          image?: (string | null) | Media;
          id?: string | null;
        }[]
      | null;
  };
  pavilionTitle?: string | null;
  pavilion?:
    | {
        title?: string | null;
        description?: string | null;
        image?: (string | null) | Media;
        id?: string | null;
      }[]
    | null;
  highlightsTitle?: string | null;
  highlights?:
    | {
        title?: string | null;
        description?: string | null;
        icon?: (string | null) | Media;
        id?: string | null;
      }[]
    | null;
  getInvolved?: {
    title?: string | null;
    content?:
      | {
          para?: string | null;
          id?: string | null;
        }[]
      | null;
    images?:
      | {
          image?: (string | null) | Media;
          id?: string | null;
        }[]
      | null;
    ctas?:
      | {
          cta?: {
            label?: string | null;
            type?: ('internal' | 'external') | null;
            page?: string | null;
            url?: string | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home-app".
 */
export interface HomeApp {
  id: string;
  /**
   * Upload Banner Images that will be shown as carousel in the mobile app home page
   */
  home_banners?:
    | {
        image?: (string | null) | Media;
        /**
         * Configure what happens when user clicks this banner
         */
        click_action?: {
          /**
           * Choose whether to navigate to an internal app screen or external website
           */
          type?: ('none' | 'internal' | 'external') | null;
          /**
           * Select which screen to navigate to within the app
           */
          internal_route?:
            | ('events' | 'speakers' | 'profile' | 'exhibition_stalls' | 'product_launch' | 'schedule_meeting')
            | null;
          /**
           * Optional parameters to pass to the route (JSON format). Example: {"productId": "123", "category": "electronics"}
           */
          route_params?:
            | {
                [k: string]: unknown;
              }
            | unknown[]
            | string
            | number
            | boolean
            | null;
          /**
           * Enter the full URL (must start with http:// or https://)
           */
          external_url?: string | null;
          /**
           * Check this to open the URL in the device default browser instead of in-app browser
           */
          open_in_browser?: boolean | null;
        };
        id?: string | null;
      }[]
    | null;
  /**
   * Enable to include this item in lists, filters, or dropdowns.
   */
  isActive?: boolean | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home-wp_select".
 */
export interface HomeWpSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        location?: T;
        dates?: T;
        bgVideo?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about-us-wp_select".
 */
export interface AboutUsWpSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        title?: T;
        desc?: T;
      };
  introduction?:
    | T
    | {
        title?: T;
        description?:
          | T
          | {
              point?: T;
              id?: T;
            };
      };
  mission?:
    | T
    | {
        title?: T;
        description?:
          | T
          | {
              point?: T;
              id?: T;
            };
        image?: T;
        imageAlt?: T;
      };
  whyTN?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  committe?:
    | T
    | {
        title?: T;
        members?:
          | T
          | {
              name?: T;
              designation?: T;
              organization?: T;
              image?: T;
              id?: T;
            };
      };
  pavilionTitle?: T;
  pavilion?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
        id?: T;
      };
  highlightsTitle?: T;
  highlights?:
    | T
    | {
        title?: T;
        description?: T;
        icon?: T;
        id?: T;
      };
  getInvolved?:
    | T
    | {
        title?: T;
        content?:
          | T
          | {
              para?: T;
              id?: T;
            };
        images?:
          | T
          | {
              image?: T;
              id?: T;
            };
        ctas?:
          | T
          | {
              cta?:
                | T
                | {
                    label?: T;
                    type?: T;
                    page?: T;
                    url?: T;
                  };
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home-app_select".
 */
export interface HomeAppSelect<T extends boolean = true> {
  home_banners?:
    | T
    | {
        image?: T;
        click_action?:
          | T
          | {
              type?: T;
              internal_route?: T;
              route_params?: T;
              external_url?: T;
              open_in_browser?: T;
            };
        id?: T;
      };
  isActive?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}